snippet "import as"
import ${1:module} as ${2:name}
endsnippet

snippet from
from ${1:module} import ${2:name}
endsnippet

snippet if "If"
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else"
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else"
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet try "Try / Except"
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet tryfinally "Try / Except"
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet ifternary "If / Else Ternary"
${1:var} = ${2:True} if ${3:condition} else ${4:False}
endsnippet

snippet for
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

snippet class
class ${1:`!p snip.rv = snip.basename.capitalize() or 'ClassName'`}(object):
	def __init__(self${2}):
		${3:${VISUAL:pass}}
endsnippet

snippet subclass
class ${1:`!p snip.rv = snip.basename.capitalize() or 'ClassName'`}(${2:SuperclassName}):
	def __init__(self${3}):
		super($1, self).__init__(${4:args})
		${5:${VISUAL}}
endsnippet

snippet def
def ${1:name}(${2:params}):
	${3:${VISUAL:pass}}
endsnippet

snippet lambda
lambda ${1:x}: ${2:pass}
endsnippet
